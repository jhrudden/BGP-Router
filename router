#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, math, copy, functools as ft

#DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('asn', type=int, help="AS Number")
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################
""" Route class which holds information about a route on the network."""
class Route: 
    port = None
    network = None
    netmask = None
    localPref = None
    selfOrigin = None
    ASPath = None
    origin = None
    def __init__(self, port, packet):
        self.port = port
        self.network = packet[MESG][NTWK]
        self.netmask = packet[MESG][NMSK]
        self.localPref = packet[MESG][LPRF]
        self.selfOrigin = packet[MESG][SORG]
        self.ASPath = packet[MESG][APTH]
        self.origin = packet[MESG][ORIG]

def and_ip_strings(ip1, ip2):
    """ Performs a bitwise and operation on two IP addresses. The addresses are strings formatted as 111.222.333.444"""
    ip1_split = ip1.split(".")
    ip2_split = ip2.split(".")
    result = []
    for i in range(len(ip1_split)):
       result.append(str(int(ip1_split[i]) & int(ip2_split[i]))) 
    return ft.reduce(lambda x, y: x + "." + y, result)

def find_submask_length(route):
    netmask_split = "".join([bin(int(x))[2:] for x in route.netmask.split(".")])
    if "01" not in netmask_split:
      return netmask_split.count("1")
    else:
      return -1


class Router:
    asn = None
    routes = None
    updates = None
    revoked = None
    relations = None
    sockets = None

    def __init__(self, asn, networks):
        self.asn = asn
        self.routes = {} # {port: Route[]}
        self.updates = []
        self.revoked = []
        self.relations = {}
        self.sockets = {}
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG: 
                print("Starting socket for", network, relation)
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
            self.routes[network] = []
        return

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        outroutes = []
        for port in self.routes.keys():
            for route in self.routes[port]:
                translated_daddr = and_ip_strings(daddr, route.netmask)
                if translated_daddr == route.network:
                    outroutes.append(route)
        return outroutes

    def longest_prefix_match(self, routes):
      outroutes = []
      longestPrefix = 0;
      for route in routes:
        currentPrefix = find_submask_length(route)
        if currentPrefix > longestPrefix:
          outroutes = [route]
          longestPrefix = currentPrefix
        elif currentPrefix == longestPrefix:
          outroutes.append(route)
      
      return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        if len(routes) == 0:
            return []
        shortest_routes = [routes[0]]
        shortest_length = len(routes[0].ASPath)
        for route_index in range(1, len(routes)):
            current_route = routes[route_index]
            current_length = len(current_route.ASPath)
            if current_length == shortest_length:
                shortest_routes.append(current_route)
            elif current_length < shortest_length:
                shortest_length = current_length
                shortest_routes = [current_route]
        return shortest_routes
            
    def get_highest_preference(self, routes):
        """ select the route with the highest local pref """
        if len(routes) == 0:
            return []
        highest_routes = [routes[0]]
        highest_pref = routes[0].localPref
        for route_index in range(1, len(routes)):
            current_route = routes[route_index]
            if current_route.localPref == highest_pref:
                highest_routes.append(current_route)
            elif current_route.localPref > highest_pref:
                highest_pref = current_route.localPref
                highest_routes = [current_route]
        return highest_routes
         
    def get_self_origin(self, routes):
        """ select self originating routes """
        outroutes = []
        for route in routes:
            if DEBUG:
              print(route.selfOrigin)
            if route.selfOrigin:
                outroutes.append(route)
        if (len(outroutes) == 0):
          return routes
        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: IGP > EGP > UNK """
        outroutes = []
        current_priority = "UNK"
        better = ["EGP", "IGP"]
        for route in routes:
            if route.origin == current_priority:
                outroutes.append(route)
            elif current_priority != "IGP" and route.origin in better:
                current_priority = route.origin
                better.remove(route.origin)
                outroutes = [route]
        if (len(outroutes) == 0):
          return routes
        return outroutes

    def get_lowest_ip_address(self, routes):
      """ get the path the router with the lowest ip address """
      if (len(routes) <= 1):
        return routes
      return [ft.reduce(lambda x, y : x if (x.network.replace(".", "") < y.network.replace(".", "")) else y, routes, routes[0])]

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        for route in routes:
            srcif_rel = self.relations[srcif]
            route_rel = self.relations[route.port]
            if (srcif_rel == CUST or route_rel == CUST):
                outroutes.append(route)
            elif (srcif_rel == PROV and route_rel == PROV):
                outroutes.append(route)
        return outroutes

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        routes = self.lookup_routes(daddr)
        # Rules go here
        if routes:
            routes = self.longest_prefix_match(routes)
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            #print("highest pref")
            #print(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            #print("get self origin")
            #print(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            #print("get shortest as path")
            #print(routes)
            # 4. IGP > EGP > UNK
            routes = self.get_origin_routes(routes)
            #print("get origin routes")
            #print(routes)
            # 5. Lowest IP Address
            routes = self.get_lowest_ip_address(routes)
            #print("get lowest ip address")
            #print(routes)
            # lowest ip address - and the two ip addresses together see which one matches
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)
            #print("filter relationships")
            #print(routes)
        # TODO: may need to use submask for line below instead of returning first index
        #print(routes)
        return routes[0] if len(routes) > 0 else None

    def forward(self, srcif, packet):
        """	Forward a data packet	"""
        if DEBUG:
          print("routes are")
        # get route that is most optimal and forward packet
        route = self.get_route(srcif, packet[DEST])
        if (route is None):
          print(packet)
          print(srcif)
          return False
        self.sockets[route.port].sendall(bytearray(json.dumps(packet).encode()))

        return True

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        
        # TODO (this is the most difficult task, save until last)
        return False

    def update(self, srcif, packet):
        """	handle update packets	"""
        # add info about where route came from to routing table
        self.routes[srcif].append(Route(srcif, packet))
        # begin process of sending update message to neighboring routers
        packet_copy = copy.deepcopy(packet)
        # add our asn to a copy of the packets ASPATH
        packet_copy[MESG][APTH].append(self.asn)

        self.route_to_neighbors(packet_copy, srcif)

        return True

    def route_to_neighbors(self, packet, srcif):
        """ Sends the packet to our neighbors, based on our relation to who sent the original packet to us """
        # if packet came from customer, then send it to all neighbors besides src
        if self.relations[srcif] == CUST:
            for socket in self.sockets.keys():
                if socket != srcif:
                    # new DEST should be the neighbor it is being sent to and new SRCE should be a
                    # ip within this router
                    ip_array = socket.split(".")
                    packet[SRCE] = (".").join(ip_array[:len(ip_array) - 1]) + ".1"
                    packet[DEST] = socket
                    packet_json = json.dumps(packet)
                    packet_json_encoded_bytes = bytearray(packet_json.encode())
                    self.sockets[socket].sendall(packet_json_encoded_bytes)
        # if packet came from PROV or PEER only send it to Customers
        else:
           for socket in self.sockets.keys():
                if socket != srcif and not(self.relations[socket] in [PROV, PEER]):
                    # new DEST should be the neighbor it is being sent to and new SRCE should be a
                    # ip within this router
                    packet[SRCE] = socket[:len(socket)-1] + "1"
                    packet[DEST] = socket
                    packet_json = json.dumps(packet)
                    packet_json_encoded_bytes = bytearray(packet_json.encode())
                    self.sockets[socket].sendall(packet_json_encoded_bytes)
    
    def revoke(self, packet):
        """	handle revoke packets	"""
        # initalize list of routes to remove to []
        # lookup routes[packet.src] --> all routes originating from src
        # loop throsugh each route
        #   loop through packet.msg
        #      if network and netmask are the same in the route and the current msg
        #          add route to list of routes to remove
        #          create revoke object with the source, network, netmask
        #          break
        routes_to_remove = []
        routes_from_src = self.routes[packet[SRCE]]
        print(packet[MESG])
        for route in routes_from_src:
          for revoke_message in packet[MESG]:
            print("Revoked message network: " + revoke_message[NTWK])
            print("route network: " + route.network)
            print("Revoked message netmask: " + revoke_message[NMSK])
            print("route netmask: " + route.netmask)
            if (route.network == revoke_message[NTWK] and route.netmask == revoke_message[NMSK]):
              print("Reached inner if statement")
              routes_to_remove.append(route)
              self.revoked.append(route)
              break

        print("looped through revoke packet")
        print(routes_from_src)
        # remove routes that we need to
        for route_to_remove in routes_to_remove:
          print("Route to remove network: " + route_to_remove.network)
          self.routes[packet[SRCE]].remove(route_to_remove)

        
        # send revoke messages if necessar
        self.route_to_neighbors(packet, packet[SRCE])


        # TODO
        return True

    def dump(self, packet):
        """	handles dump table requests	"""
        packet_copy = copy.deepcopy(packet)
        # send packet back from windst it came! But with our routing table info
        packet_copy[SRCE] = packet[DEST]
        packet_copy[DEST] = packet[SRCE]
        packet_copy[TYPE] = TABL
        table = []
        for port in self.routes.keys():
            for routes in self.routes[port]:
                # add each route in our routing table to array for dump message
                table.append({"network": routes.network, "netmask":routes.netmask, "peer": port})
        packet_copy[MESG] = table
        self.sockets[packet_copy[DEST]].sendall(bytearray(json.dumps(packet_copy).encode()))
        
        return True

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        # TODO
        if packet[TYPE] == UPDT:
            return self.update(srcif, packet)
        elif packet[TYPE] == DUMP:
            return self.dump(packet)
        elif packet[TYPE] == DATA:
            return self.forward(srcif, packet)
        elif packet[TYPE] == RVKE:
            return self.revoke(packet)
        else:
            return False

    def send_error(self, conn, packet, srcif):
        """ Send a no_route error message """
        packet[TYPE] = NRTE
        packet[MESG] = {}
        # print("packet source: " + packet[SRCE])
        # print("packet destination: " + packet[DEST])
        # src_ip_array = packet[DEST].split(".")
        # packet[SRCE], packet[DEST] = (".").join(src_ip_array[:len(src_ip_array) - 1]) + ".1", packet[SRCE]
        #packet[SRCE], packet[DEST] = packet[DEST], packet[SRCE]

        src_ip_array = srcif.split(".")
        packet[SRCE], packet[DEST] = (".").join(src_ip_array[:len(src_ip_array) - 1]) + ".1", packet[SRCE]

        # print("new packet source: " + packet[SRCE])
        # print("new packet destination: " + packet[DEST])

        #packet[SRCE], packet[DEST] = packet[DEST], packet[SRCE]
        conn.sendall(bytearray(json.dumps(packet).encode()))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    if DEBUG:
                      print(msg)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg, srcif)
                else:
                    return
        return

if __name__ == "__main__":
    router = Router(args.asn ,args.networks)
    router.run()
